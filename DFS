#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 18 16:52:55 2023

@author: james
"""

# =============================================================================
# DFS(G, u)

#     u.visited = true

#     for each v ∈ G.Adj[u]

#         if v.visited == false

#             DFS(G,v)   

# init() {

#     For each u ∈ G

#         u.visited = false

#      For each u ∈ G

#        DFS(G, u)

# }
# =============================================================================


# Using a Python dictionary to act as an adjacency list
graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}


# visit = set()

# def dfs(visit, graph, node):
#     if node not in visit:
#         print(node)
#         visit.add(node)
#         for neighbour in graph[node]:
#             dfs(visit, graph, neighbour)
    
#     return visit

dfs_res = []

def dfs(graph, start, visit = None):
    if visit is None:
        visit = set()
    visit.add(start)
    
    dfs_res.append(start)
    print(start)
    
    for next in graph[start]:
        dfs(graph, next, visit)
    
    return visit



res = dfs(graph, '5')
