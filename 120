#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 20 16:09:42 2023

@author: james
"""



# =============================================================================
# dynamic programming 

# dp[i, j] = min(df[i+1, j], dp[i+1, j+1]) + triangle[i, j]

# begining: dp[n-1, j] = triangle[n-1,j]
# =============================================================================

triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]


# dp = {}

# dep = len(triangle)
# for i in range(len(triangle[-1])):
#     dp[dep][i] = triangle[-1][i]



dp = [[-1] * _ for _ in range(1, len(triangle)+1)]

dp[-1] = triangle[-1]

for i in range(len(triangle)-2, -1, -1):
    for j in range(0, len(triangle[i])):
        dp[i][j] = min(dp[i+1][j], dp[i+1][j+1]) + triangle[i][j]























# n = len(triangle)

# dp = [[-1] * _ for _ in range(1, n+1)]

# dp[n-1] = triangle[-1]

# for i in range(n-2, -1, -1):
#     for j in range(len(triangle[i])):
#         dp[i][j] = triangle[i][j] + min(dp[i+1][j], dp[i+1][j+1])
        