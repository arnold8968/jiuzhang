#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 20 14:57:42 2023

@author: james
"""


# =============================================================================
# DP function

# climbStairs(n-1) + climbStairs(n-2) 
# =============================================================================

# class soluction:
    
#     def climbStairs(self, n):
#         self.climbStairs(0) = 1
#         self.climbStairs(n-1) + self.climbStairs(n-2) 


def climbStairs(n):
    if n == 0 or n == 1 or n == 2:
        return n
    
    mem = {}
    
    mem[0] = 1
    mem[1] = 2
    for i in range(2, n):
        mem[i] = mem[i-1] + mem[i-2]
    
    return mem[n-1]


# res = climbStairs(5)



def climbStairs2(n):
    if n <= 2:
        return n
    
    one_step_before = 2
    two_step_before = 1
    
    for i in range(2, n):
        two_step_before, one_step_before = one_step_before, one_step_before + two_step_before
    
    return one_step_before

res2 = climbStairs2(5)




def climbStairs(n):
    if n <= 2:
        return n
    
    mem = {}
    mem[0] = 1
    mem[1] = 2
    for i in range(2, n):
        mem[i] = mem[i-1] + mem[i-2]
    
    return mem[n-1]




solu = climbStairs(5)








































